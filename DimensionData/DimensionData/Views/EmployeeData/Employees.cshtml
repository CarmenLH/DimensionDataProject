@*@model IEnumerable<DimensionData.Models.EmployeeModel>*@
@model PaginatedList<DimensionData.Models.EmployeeModel>

@{
    ViewData["Title"] = "Employees";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<form asp-action="Employees" method="get">
    <div class="form-actions no-color">
        <p>
            Find by department: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Employees">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @*@Html.DisplayNameFor(model =>  model.EmployeeNumber)*@
                <a asp-action="Employees" asp-route-sortOrder="@ViewData["EmpNrSortParam"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Employee Number</a>
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.Age)*@
                Age
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.Gender)*@
                Gender
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.Department)*@
                Department
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.JobRole)*@
                Job Role
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.JobLevel)*@
                Job Level
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.EmployeeNumber)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Age)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Department)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JobRole)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.JobLevel)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ListID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ListID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ListID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Employees"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Employees"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>